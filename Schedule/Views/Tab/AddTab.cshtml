@model TabViewModel

@{
    ViewBag.Title = "Нові дані";
}

<div id="result-message"></div>
<form id="form-schedule">
    <div class="tab-devices">
        <h4>Пристрої</h4>
        <div class="form-group row">
            @Html.LabelFor(m => m.NumberOfDevices, "Кількість", new { @class = "col-sm-4 col-form-label" })
            @Html.TextBoxFor(m => m.NumberOfDevices, new { @class = "form-control", type = "number", min = 2, max = 10, Value = 2, onKeyDown = "filterInteger(this)", onKeyUp = "filterMaxValue(this, 10)", onfocusout = "filterMin(this, 2)" })
        </div>
        <div style="display:block">Тип:</div>
        <div class="form-check form-check-inline">
            @Html.RadioButtonFor(m => m.DeviceType, "Identical", new { id = "identical", @class = "form-check-input", @checked = true })
            @Html.LabelFor(m => m.DeviceType, "Ідентичний", new { @for = "identical", @class = "form-check-label", style = "margin-right:15px;" })

            @Html.RadioButtonFor(m => m.DeviceType, "Nonidentical", new { id = "non-identical", @class = "form-check-input" })
            @Html.LabelFor(m => m.DeviceType, "Неідентичний", new { @for = "non-identical", @class = "form-check-label" })
        </div>
        @{ Html.RenderPartial("_KeyValueForm", FormType.Device); }
    </div>

    <div class="tab-devices">
        <h4>Палета</h4>
        <div class="form-group row">
            @Html.LabelFor(m => m.NumberOfPalleteRows, "Кількість рядів:", new { @class = "col-sm-7 col-form-label" })
            <div class="col-sm-2">
                @Html.TextBoxFor(m => m.NumberOfPalleteRows, new { @class = "form-control", type = "number", min = 2, max = 20, Value = 2, onKeyDown = "filterInteger(this)", onKeyUp = "filterMaxValue(this, 20)", onfocusout = "filterMin(this, 2)" })
            </div>
        </div>
        <div class="form-group row">
            @Html.LabelFor(m => m.NumberOfWorkPerRow, "Кількість об'єктів у ряді:", new { @class = "col-sm-7 col-form-label" })
            <div class="col-sm-2">
                @Html.TextBoxFor(m => m.NumberOfWorkPerRow, new { @class = "form-control", type = "number", min = 2, max = 20, Value = 2, onKeyDown = "filterInteger(this)", onKeyUp = "filterMaxValue(this, 20)", onfocusout = "filterMin(this, 2)" })
            </div>
        </div>
        @{ Html.RenderPartial("_KeyValueForm", FormType.Pallete); }
    </div>
    <div class="control-buttons">
        <div class="block"><button id="btn-clear" type="button" class="btn btn-outline-success control-button">Очистити</button></div>
        <div class="block"><button id="form-schedule-submit" type="submit" class="btn btn-success control-button-low">Розрахувати</button></div>
        <div class="block"><button id="btn-generate" type="button" class="btn btn-warning control-button-low">Автозаповнення</button></div>
    </div>
</form>

@section scripts
{
    <script type="text/javascript">
    $(activateNavLink('nav-addTab'));

    function renderPallets() {
        var numberOfPalletes = $("#NumberOfPalleteRows").val();
        var numberOfWork = $("#NumberOfWorkPerRow").val();
        renderPalleteRows(numberOfPalletes, numberOfWork);
    }

        (function () {
            renderPallets();
        })();

    $("#non-identical").click(function () {
        $("#@FormType.Device").removeClass("disable");
        renderReviceProductivities();
    });

    $("#identical").click(function () {
        $("#@FormType.Device").addClass("disable");
    });

    var deviceCount = 0;
    $("#NumberOfDevices").bind("keyup click", function () {
        renderReviceProductivities();
    });

        function renderReviceProductivities() {
            var val = $("#NumberOfDevices").val();
            if (deviceCount !== val) {
                deviceCount = val;
                renderDeviceRows(deviceCount);
            }
        }

    var previousPalleteCount = 0;
    var previousWorkCount = 0;

        $("#NumberOfPalleteRows").bind("keyup click", function () {
            var numberOfPalletes = $("#NumberOfPalleteRows").val();
            var numberOfWork = $("#NumberOfWorkPerRow").val();

            if (numberOfWork == 0) {
                $("#Pallete-fields").empty();
                return;
            }

            if (previousPalleteCount !== numberOfPalletes) {
                previousPalleteCount = numberOfPalletes;
                renderPalleteRows(numberOfPalletes, numberOfWork);
            }
        });

    $("#NumberOfWorkPerRow").bind('keyup click', function () {
        var numberOfPalletes = $("#NumberOfPalleteRows").val();
        var numberOfWork = $("#NumberOfWorkPerRow").val();

        if (numberOfPalletes == 0) {
            $("#Pallete-fields").empty();
            return;
        }

        if (previousWorkCount !== numberOfWork) {
            previousWorkCount = numberOfWork;
            renderPalleteRows(numberOfPalletes, numberOfWork);
        }
    });

    function renderDeviceRows(count) {
        $("#Device-fields").empty();

        for (var row = 1; row <= count; row++) {
            var form =
                `<div class="key-value-div">` +
                `<label for="ProductivityCoefByDevice${row}">${row} </label>` +
                `<input type="text" id="ProductivityCoefByDevice${row}" value="1" onKeyDown = "filterDecimal(this)", onKeyUp = "filterMaxValue(this, 5)", onfocusout = "filterMin(this, 1)" />` +
                '</div>';

            $("#Device-fields").append(form);
        }
    }

    function renderPalleteRows(palleteCount, workCount) {
        $("#Pallete-fields").empty();

        for (var row = 0; row < palleteCount; row++) {
            for (var work = 0; work < workCount; work++) {
                var form =
                    `<div class="key-value-div">` +
                    `<label for="DurationByWork${row}${work}">${row+1}.${work+1}</label>` +
                    `<input type="text" id="DurationByWork${row}${work}" value="1" onKeyDown="filterInteger(this)" onKeyUp="filterMaxValue(this, 30)" onfocusout="filterMin(this, 0)"/>` +
                    '</div>';

                $("#Pallete-fields").append(form);
            }
        }
    }

        function filterInteger(input) {
            var e = event || window.event;
            var key = e.keyCode || e.which;

            if (key == 8 || key == 91 || key == 92) {
                return;
            }

            if (key < 48 || key > 57) { //if it is not a number ascii code
                //Prevent default action, which is inserting character
                if (e.preventDefault) e.preventDefault(); //normal browsers
            }
        }

        function filterDecimal(input) {
            var e = event || window.event;
            var key = e.keyCode || e.which;
            console.log(key);
            if (key == 8 || key == 91 || key == 92) {
                return;
            }

            if (input.value.length == 0 && (key == 190 || key == 110)) {
                if (e.preventDefault) e.preventDefault();
                return;
            }

            if (input.value.includes('.') && (key == 190 || key == 110)) {
                if (e.preventDefault) e.preventDefault();
                return;
            }

            if (key == 190 || key == 110 || (key > 48 && key < 57)) {
                return;
            }

            if (e.preventDefault) e.preventDefault(); //normal browsers
        }

        function filterMaxValue(input, max) {
            if (input.value > max) {
                input.value = max;
            }
        }

        function filterMin(input, min) {
            if (input.value.length == 0) {
                input.value = min;
            }
        }

    $("#form-schedule-submit").click(function (e) {
        e.preventDefault();

        $('#form-schedule-submit').html('Рахується...');
        $('#form-schedule-submit').prop('disabled', true);

        var scheduleForm = {};
        scheduleForm.NumberOfDevices = $("#NumberOfDevices").val();
        scheduleForm.DeviceType = $('input[name=DeviceType]:checked').val();
        scheduleForm.DeviceProductivities = [];

        if (scheduleForm.DeviceType == "Nonidentical") {
            $("#Device-fields input[type=text]").each(function () {
                scheduleForm.DeviceProductivities.push(this.value);
            })
        } else {
            for (var i = 0; i < scheduleForm.NumberOfDevices; i++) {
                scheduleForm.DeviceProductivities.push(1);
            }
        }

        scheduleForm.NumberOfPalleteRows = $("#NumberOfPalleteRows").val();
        scheduleForm.NumberOfWorkPerRow = $("#NumberOfWorkPerRow").val();

        scheduleForm.DurationByWork = [];
        if (scheduleForm.NumberOfPalleteRows != 0 && scheduleForm.NumberOfWorkPerRow != 0) {
            for (var row = 0; row < scheduleForm.NumberOfPalleteRows; row++) {
                scheduleForm.DurationByWork.push([]);
                for (var col = 0; col < scheduleForm.NumberOfWorkPerRow; col++) {
                    var id = `#DurationByWork${row}${col}`;
                    scheduleForm.DurationByWork[row][col] = $(id).val();
                }
            }
        }

        post(
            '@Url.HttpRouteUrl("SaveTabRoute", routeValues: null)',
            scheduleForm,
            addTablSuccessCallBack,
            addTabErrorCallBack);
    });

    var addTablSuccessCallBack = function (content) {
        changeResultMessage("alert-success", "Розрахунок проведено й дані успішно збережені");

        $('#form-schedule-submit').html('Розразунок');
        $('#form-schedule-submit').prop('disabled', false);
    }

    var addTabErrorCallBack = function (content) {
        changeResultMessage("alert-danger", "Сталася помилка при збережені даних: " + content.statusText);

        $('#form-schedule-submit').html('Розразунок');
        $('#form-schedule-submit').prop('disabled', false);
    }

    function changeResultMessage(classToAdd, tagText) {
        $("#result-message").removeClass();
        $("#result-message").addClass("alert").addClass(classToAdd);
        $("#result-message").html(tagText);
    }

    function clearForm() {
        $("#form-schedule")[0].reset();
        $('input[name=DeviceType]')[0].checked = true;
        $("#Device-fields").empty();
        $("#Pallete-fields").empty();
        renderPallets();
    }

    $("#btn-clear").click(function () {
        clearForm();
        $("#result-message").addClass("disable");
    });

        $("#btn-generate").click(function () {
            var deviceCount = getRandomValue(2, 9);
            $("#NumberOfDevices").val(deviceCount);
            renderReviceProductivities();

            if ($('input[name=DeviceType]')[0].checked) {
            } else {
                $("#Device-fields input[type=text]").each(function () {
                    this.value = getRandomValue(1, 4) + getRandomValue(1, 9) / 10;
                })
            }

            numberOfPalletes = getRandomValue(Math.floor(deviceCount / 2) + 1, 5);
            numberOfWork = getRandomValue(2, 19);
            $("#NumberOfPalleteRows").val(numberOfPalletes);
            $("#NumberOfWorkPerRow").val(numberOfWork);

            renderPalleteRows(numberOfPalletes, numberOfWork);

            for (var row = 0; row < numberOfPalletes; row++) {
                for (var col = 0; col < numberOfWork; col++) {
                    var id = `#DurationByWork${row}${col}`;
                    $(id).val(getRandomValue(1, 9));
                }
            }
        });

        function getRandomValue(min, max) {
            return Math.floor(Math.random() * max) + min;
        }

    </script>
}