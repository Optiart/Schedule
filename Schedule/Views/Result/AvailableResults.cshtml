@model ResultViewModel

@{
    ViewBag.Title = "Результати";
    int index = 1;
}

@if (Model == null)
{
    <h2>Дані відсутні</h2>
}
else
{
    <div class="tab-nav">
        <ul class="nav nav-tabs">
            @foreach (var id in Model.TabIds)
            {
                <li id="nav-item-@id" class="nav-item">
                    <a id="tab-@id" href="#" class="tab nav-link @(index == 1 ? "tab-active nav-link-active" : string.Empty)">Вкладка №@(index++)</a>
                </li>
            }
        </ul>
    </div>

    <div class="graph-grid">
        <div class="chain">
            <table>
                <tr class="chain-header">
                    <td width="100px" height="40px">Робота</td>
                    <td width="100px" height="40px">Тривалість</td>
                </tr>
                @{ int rows = Model.Chain.GetLength(0); }
                @for (int i = 0; i < rows; i++)
                {
                    <tr class="chain-data-row">
                        <td>@Model.Chain[i, 0]</td>
                        <td>@Model.Chain[i, 1]</td>
                    </tr>
                }
            </table>
        </div>
        <div class="legend">
            <div class="legend-header">УМОВНІ ПОЗНАЧЕННЯ</div>
            <div class="block"><span>i</span> - ланцюг</div>
            <div class="block"><span>j</span> - порядок виконання роботи в ланцюзі</div>
            <div class="block"><span>p</span> - тривалість ij</div>
        </div>
        <div class="graph-row">
            <div class="graph-name">@AlgorithmType.Algorithm1</div>
            @RenderGraph(AlgorithmType.Algorithm1)
        </div>

        <div class="graph-row">
            <div class="graph-name">@AlgorithmType.Algorithm2</div>
            @RenderGraph(AlgorithmType.Algorithm2)
        </div>
        <div class="graph-row">
            <div class="graph-name">@AlgorithmType.Algorithm3</div>
            @RenderGraph(AlgorithmType.Algorithm3)
        </div>

        <div class="graph-row">
            <div class="graph-name">@AlgorithmType.Algorithm4</div>
            @RenderGraph(AlgorithmType.Algorithm4)
        </div>
    </div>
}

@section scripts
{
    <script type="text/javascript">
        $(activateNavLink('nav-availableResults'));

        $(document).ready(function () {
            $('[data-toggle="tooltip"]').tooltip();
        });
    </script>
}

@helper RenderGraph(AlgorithmType type)
    {
        <div class="graph">
            @{
                int widthBlockPx = 4;
                int epsilon = 10;
                int currentDevice = Model.GraphData[type].Count;
                decimal lastWorkEnd = 0;
            }
            <div class="y-arrow">&#x21FE;</div>
            @foreach (var kvp in Model.GraphData[type])
            {
                <div class="device-work">
                    <div class="device-id">
                        @kvp.Key
                    </div><div class="x-data">
                        @{
                            int rowGapIndex = 0;
                        }
                        @foreach (var row in kvp.Value)
                        {
                            for (int i = rowGapIndex; i < (int)(row.Start * epsilon); i++)
                            {
                                <div style="width: @(widthBlockPx)px; background-color: #EFEEE9; border:none"></div>
                            }

                            string width = ((int)(row.Duration * epsilon) * widthBlockPx).ToString() + "px";
                            string color = Model.ColorByPalleteWork[(int)row.PalleteWork];
                            <div data-toggle="tooltip" title="@row.Duration" style="cursor:pointer; width: @width; background-color: @color">@row.PalleteWork / @row.Duration</div>
                            {
                                rowGapIndex = (int)(row.End * epsilon);
                                lastWorkEnd = row.End;
                            }
                        }
                        <div style="position:relative; left: -1px; border: 0;">
                            <div style="position:absolute; border: 0;height: @(currentDevice * 33 + 16)px; background-image: url('../../Images/vertical-dash.png'); background-repeat:repeat-y">&nbsp;</div>
                            <div style="position:absolute; border: 0; left:-2px; top: @(currentDevice * 33 + 35)px;">C = @lastWorkEnd</div>
                            @{ currentDevice--; }
                        </div>
                    </div>
                    <div class="y-margin"></div>
                </div>
            }
            <div class="y-margin"></div><div class="y-margin"></div>
            <div class="x">
                @for (int i = 0; i <= Model.MaxDurationByAlgorithmType[type]; i++)
                {
                    <div style="position:relative; width:@(widthBlockPx * epsilon)px; left:-1px">
                        <div style="font-size:14px; border: none; position:absolute; top:-10px;">|</div>
                        <div style="font-size:14px; border: none; position:absolute; top:5px;left:-3px">@i</div>
                    </div>
                }
                <div class="x-arrow">&#x21FE; t, од.</div>
            </div>
        </div>
}